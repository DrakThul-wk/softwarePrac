#include "securec.h"
#include <string.h>
#include "stdio.h" 
#include "stdlib.h" 
#include "math.h"
#include "stdarg.h"
/*recorded here*/
int DfsSearch(int **data, int row, int minBoundary, int highBoundary, int *visit, int n, int *match)
{
    for (int col = 0; col < n; col++) {
        if (data[row][col] >= minBoundary && data[row][col] <= highBoundary && visit[col] == -1) {
            visit[col] = 1;
            // 注意dfs使用match[col]
            if (match[col] == -1 || DfsSearch(data, match[col], minBoundary, highBoundary, visit, n, match)) {
                match[col] = row;
                return 1;
            }
        }
    }
    return 0;
}

int matchFunc(int **data, int minBoundary, int highBoundary, int n)
{
    int *visit, *match;
    visit = (int *)malloc(sizeof(int) * n);
    match = (int *)malloc(sizeof(int) * n);
    memset(match, -1, sizeof(int) * n);
    for (int row = 0; row < n; row++) {
        memset(visit, -1, sizeof(int) * n);
        if (DfsSearch(data, row, minBoundary, highBoundary, visit, n, match) == 0) {
            return 0;
        }
    }
    return 1;
}

int BinSearch(int **data, int minValue, int highValue, int n)
{
    int mid, i, j, minValueTmp;
    i = 0;
    j = highValue - minValue;
    int ret;
    while (i <= j) {
        mid = (i + j) / 2;
        ret = 0;
        for (minValueTmp = minValue; minValueTmp + mid <= highValue; minValueTmp++) {
            if (matchFunc(data, minValueTmp, minValueTmp + mid, n) == 1) {
                ret = 1;
            }
        }
        if (ret == 0) {
            i = mid + 1;
        } else {
            j = mid - 1;
        }
    }
    return i;
}

int main(int argc, char* argv[])
{
    int *visit;
    int n;
    int **data;
    scanf("%d", &n);
    data = (int **)malloc(sizeof(int *) * n);
    for (int i = 0; i < n; i++) {
        data[i] = (int *)malloc(sizeof(int) * n);
    }
    int minValue = 101;
    int maxValue = 0;
    int minRes = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &data[i][j]);
            minValue = minValue < data[i][j] ? minValue : data[i][j];
            maxValue = maxValue > data[i][j] ? maxValue : data[i][j];
        }

    }
    minRes = BinSearch(data, minValue, maxValue, n);
    printf("%d", minRes);
    return 0;
}

/*
有两个核心问题没有解决：算法为什么一定能得到最优匹配？算法复杂度为什么不再是指数级了？
*/


题目描述
给定一个n*n的矩阵，从这个矩阵中选n个数，这n个数两两之间必须在不同行不同列，问这n个数中最大值与最小值之差的最小值是多少？

解答要求
时间限制：1000ms, 内存限制：100MB
输入
每组测试数据格式如下：
第一行是一个整数n（1<=n<=100）
接下来n行，每行n个整数，表示给定的矩阵，矩阵中的元素不会超过100。

输出
输出n个数中最大值与最小值之差的最小值。

样例
输入样例 1 复制

4
1 1 1 1
2 2 2 2
3 3 3 3
4 4 4 4
输出样例 1

3
提示样例 1


提示
二分最后的答案，枚举这n个数中的最小值，利用匈牙利算法进行二分匹配（行配列）判断是否可行。
